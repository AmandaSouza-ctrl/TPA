from queue import PriorityQueue
from random import randint, uniform

import networkx as nx
from matplotlib import animation, rc
import matplotlib.pyplot as plt

# inicialização da animação a ser feita
rc('animation', html='html5')

# número de pontos de abastecimento
NUM_NODES = 14

def random_node():
  # criação de nó aleatório
  return randint(0, NUM_NODES-1)

def random_weight():
  # criação de peso aleatório
  return uniform(0, 1)

# declaração do grafo
graph = nx.Graph()

# for i in range(1, NUM_NODES):
#   # adição das arestas no grafo
#   graph.add_edge(i-1, i, weight=random_weight())

for _ in range(NUM_NODES * 5):
  # adição das arestas no grafo
  graph.add_edge(
      random_node(), random_node(), weight=random_weight()
  )

# declaração de layout aleatório a partir do grafo gerado
pos = nx.random_layout(graph)

# lista de tuplas de todas as arestas
all_edges = set(
  tuple(sorted((n1, n2))) for n1, n2 in graph.edges()
)
edges_in_mst = set()
nodes_on_mst = set()

# plot dos itens no grafo
fig, ax = plt.subplots(figsize=(6,4))


def prims():
  # criação da lista de prioridades
  pqueue = PriorityQueue()

  # definição do nó inicial
  start_node = 5

  # visita os vizinhos do nó inicial
  for neighbor in graph.neighbors(start_node):
    edge_data = graph.get_edge_data(start_node, neighbor)
    edge_weight = edge_data["weight"]
    pqueue.put((edge_weight, (start_node, neighbor)))

  # percorre toda a lista de nós da árvore
  while len(nodes_on_mst) < NUM_NODES:
    # pega a aresta de menor peso da lista de prioridade
    _, edge = pqueue.get(pqueue)
  
    if edge[0] not in nodes_on_mst:
      new_node = edge[0]
    elif edge[1] not in nodes_on_mst:
      new_node = edge[1]
    else:
      # pula se já existir uma aresta menor inserida na lista
      continue
  
    # para cada nó que é adicionado na fila, adiciona a proxima aresta na lista de prioridade
    for neighbor in graph.neighbors(new_node):
      edge_data = graph.get_edge_data(new_node, neighbor)
      edge_weight = edge_data["weight"]
      pqueue.put((edge_weight, (new_node, neighbor)))
  
    # adiciona a aresta na árvore
    edges_in_mst.add(tuple(sorted(edge)))
    nodes_on_mst.add(new_node)
  
    # coleta as arestas da árvore
    yield edges_in_mst

def update(mst_edges):
  # função de atualização dos pontos a serem plotados na animação
  ax.clear()
  nx.draw_networkx_edges(
    graph, pos, edgelist=all_edges-mst_edges, alpha=0.1,
    edge_color='g', width=1, ax=ax
  )
  nx.draw_networkx_edges(
    graph, pos, edgelist=mst_edges, alpha=1.0,
    edge_color='b', width=1, ax=ax
  )
  nx.draw_networkx_labels(graph, pos, {n: n for n in graph}, font_size=8)

def do_nothing():
  # função inicial da animação
  pass

ani = animation.FuncAnimation(
    fig,
    update,
    init_func=do_nothing,
    frames=prims,
    interval=500,
)

ani
